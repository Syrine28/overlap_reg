import numpy as np
from PIL import Image
import cv2

def normal_vector(pixels) :
    return np.multiply(pixels, 2) - np.ones(3)
    #2 * pixels - 1

def convert_to_array(img) :
    for i in range(0,img.shape[0]):
        for j in range(0,img.shape[1]):
            pixel = img[i,j]/255
        return pixel

def loss_fct(matrix_ov_reg1, matrix_ov_reg2) :
    sum = 0
    for i in range(len(matrix_ov_reg1)) :
        n1 = normal_vector(convert_to_array(matrix_ov_reg1[i]))
        n2 = normal_vector(convert_to_array(matrix_ov_reg2[i]))
        error = np.linalg.norm(n1-n2)
        sum += error
    
    return sum/(len(matrix_ov_reg1)) # len(matrix_ov_reg1) = # of pixels (same as reg2)

def sweep_and_compare(overlap1_a, overlap2_a) :
    min_loss_fct = loss_fct(overlap1_a, overlap2_a)
    min_overlap1 = overlap1_a
    min_overlap2 = overlap2_a

    height1 = overlap1_a.shape[0]
    width1 = overlap1_a.shape[1]
    height2 = overlap2_a.shape[0]
    width2 = overlap2_a.shape[1]

    while (width1 > 0) :
        
        overlap1_sw = overlap1_a[height1:height1, width1:width1-1]
        overlap2_sw = overlap2_a[height2:height2, width2:width2-1]
        """
        width1 = width1 - 1
        height1 = overlap1_a.shape[0]
        dim1 = (width1, height1)
        overlap1_sw = cv2.resize(overlap1_a, dim1, interpolation = cv2.INTER_AREA)

        width2 = width2 - 1
        height2 = overlap2_a.shape[0]
        dim2 = (width2, height2)
        overlap2_sw = cv2.resize(overlap2_a, dim2, interpolation = cv2.INTER_AREA)
        """

        curr_loss_fct = loss_fct(overlap1_sw, overlap2_sw)
        
        if (curr_loss_fct < min_loss_fct) :
            min_loss_fct = curr_loss_fct
            min_overlap1 = overlap1_sw #or matrix_ov_reg1
            min_overlap2 = overlap2_sw #or matrix_ov_reg2
    
        overlap1_a = overlap1_sw
        overlap2_a = overlap2_sw
    
    """
    width1, height1 = overlap1.size
    width2, height2 = overlap2.size
    while (width1 > 0) :
        overlap1_sw = overlap1.resize((width1 - 1, height1))
        width1, height1 = overlap1_sw.size
        
        overlap2_sw = overlap2.resize((width2 - 1, height2))
        width2, height2 = overlap1_sw.size

        matrix_ov_reg1 = np.array(overlap1_sw.getdata())
        matrix_ov_reg2 = np.array(overlap2_sw.getdata())
        
        curr_loss_fct = loss_fct(matrix_ov_reg1, matrix_ov_reg2)
        
        if (curr_loss_fct < min_loss_fct) :
            min_loss_fct = curr_loss_fct
            min_overlap1 = overlap1_sw # or matrix_ov_reg1
            min_overlap2 = overlap2_sw # or matrix_ov_reg2
    
    """
    return cv2.imshow('/Users/syrineenneifer/Desktop/best_overlap00' ,min_overlap1), cv2.imshow('/Users/syrineenneifer/Desktop/best_overlap01' ,min_overlap2) #or just min_overlap1
    

"""
img1 = Image.open("/Users/syrineenneifer/Desktop/oak_back_00_heightmap_nrm.png")
img2 = Image.open("/Users/syrineenneifer/Desktop/oak_back_01_heightmap_nrm.png")


overlap_reg1 = img1.crop((4150, 0, 6024, 4022))
overlap_reg1.save('/Users/syrineenneifer/Desktop/cropped_overlap00.png')
seq_overlap_reg1 = overlap_reg1.getdata()
array_overlap_reg1 = np.array(seq_overlap_reg1)
#print(array_overlap_reg1)

overlap_reg2 = img2.crop((0, 0, 1874, 4022))
overlap_reg2.save('/Users/syrineenneifer/Desktop/cropped_overlap01.png')
seq_overlap_reg2 = overlap_reg2.getdata()
array_overlap_reg2 = np.array(seq_overlap_reg2)

print(sweep_and_compare(overlap_reg1, overlap_reg2, array_overlap_reg1, array_overlap_reg2))
"""

img1 = Image.open("/Users/syrineenneifer/Desktop/oak_back_00_heightmap_nrm.png")
overlap_reg1 = img1.crop((4150, 0, 6024, 4022))
overlap_reg1.save('/Users/syrineenneifer/Desktop/cropped_overlap00.png')

overlap_reg1_a = cv2.imread('/Users/syrineenneifer/Desktop/cropped_overlap00.png')


img2 = Image.open("/Users/syrineenneifer/Desktop/oak_back_01_heightmap_nrm.png")
overlap_reg2 = img2.crop((0, 0, 1874, 4022))
overlap_reg2.save('/Users/syrineenneifer/Desktop/cropped_overlap01.png')

overlap_reg2_a = cv2.imread('/Users/syrineenneifer/Desktop/cropped_overlap01.png')

sweep_and_compare(overlap_reg1_a, overlap_reg2_a)